{"version":3,"sources":["reportWebVitals.js","usersList.js","userAdd.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getUsers","a","fetch","method","headers","UsersList","state","isFetching","users","response","ok","json","setState","data","map","x","last_name","first_name","catch","this","item","index","React","userAdd","user","body","JSON","stringify","UserAdd","addUser","e","preventDefault","name","document","getElementById","value","job","userAdded","newUserID","id","onSubmit","class","for","type","ReactDOM","render","StrictMode"],"mappings":"uKAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,0DCHRQ,EAAQ,uCAAG,sBAAAC,EAAA,sEAEFC,MAJW,gBAIc,CAClCC,OAAQ,MACRC,QAAU,CACN,eAAgB,sBALT,mFAAH,qDA2DCC,E,kDA/CX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,YAAY,EACZC,MAAO,IAJD,E,qDAQd,WAAqB,IAAD,OAChBR,IACKN,MAAK,SAACe,GACCA,EAASC,IACTD,EAASE,OAAOjB,MAAK,SAAAiB,GACjB,EAAKC,SACD,CACIL,YAAY,EACZC,MAAOG,EAAKE,KAAKC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,UAAY,IAAMD,EAAEE,sBAMnEC,OAAM,WACH,EAAKN,SAAS,CAAEL,YAAY,S,oBAIxC,WACI,OACI,gCACI,+CACA,6BAEQY,KAAKb,MAAMC,WAEP,kDAEAY,KAAKb,MAAME,MAAMM,KAAI,SAACM,EAAMC,GAAP,OACjB,6BAAiBD,GAARC,e,GAxCjBC,aCVlBC,EAAO,uCAAG,WAAOC,GAAP,SAAAvB,EAAA,sEAEDC,MAJS,gBAIc,CAChCC,OAAQ,OACRC,QAAU,CACR,OAAU,mBACV,eAAgB,oBAElBqB,KAAMC,KAAKC,UAAUH,KARX,mFAAH,sDA2EEI,E,kDA7DX,aAAe,IAAD,8BACV,gBAOJC,QAAU,SAACC,GACPA,EAAEC,iBAEF,IAAMC,EAAOC,SAASC,eAAe,QAAQC,MACvCC,EAAMH,SAASC,eAAe,OAAOC,MAG3CZ,EAAQ,CACJ,KAAQS,EACR,IAAOI,IACR1C,MAAK,SAAAe,GACAA,EAASC,IACTD,EAASE,OAAOjB,MAAK,SAAAiB,GACjB,EAAKC,SACD,CACIyB,WAAW,EACXC,UAAW3B,EAAK4B,YAtBpC,EAAKjC,MAAQ,CACT+B,WAAW,EACXC,UAAW,MAJL,E,0CAgCd,WACI,OACI,gCACI,4CACA,uBAAME,SAAUrB,KAAKU,QAArB,UACI,sBAAKY,MAAM,aAAX,UACI,uBAAOC,IAAI,OAAX,8BACA,uBAAOC,KAAK,OAAOJ,GAAG,YAG1B,sBAAKE,MAAM,aAAX,UACI,uBAAOC,IAAI,MAAX,6BACA,uBAAOC,KAAK,OAAOJ,GAAG,WAG1B,wBAAQI,KAAK,SAAb,yBAGAxB,KAAKb,MAAM+B,UAEX,uBAAMI,MAAM,QAAZ,6CAAqDtB,KAAKb,MAAMgC,aAEhE,gC,GAxDEhB,aCRtBsB,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,gDAAkB,kDAClB,cAAC,EAAD,IACA,cAAC,EAAD,OAEFb,SAASC,eAAe,SAM1B3C,M","file":"static/js/main.80c50aba.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\n\nconst usersListEndpoint = \"/reqres/users\";\n\nconst getUsers = async () => {\n\n  return await fetch(usersListEndpoint, {\n      method: \"GET\",\n      headers:  {\n          'Content-Type': 'application/json'\n      }\n    })\n};\n\nclass UsersList extends React.Component {\n    \n    constructor() {\n        super();\n        this.state = {\n            isFetching: true,\n            users: [] \n        };\n    }\n\n    componentDidMount() {\n        getUsers()\n            .then((response) => {\n                if (response.ok) {\n                    response.json().then(json => {\n                        this.setState(\n                            {\n                                isFetching: false,\n                                users: json.data.map(x => x.last_name + \" \" + x.first_name)\n                            }\n                        )\n                    })\n                }\n            })\n            .catch(() => {\n                this.setState({ isFetching: false });\n            });\n    }\n    \n    render() {\n        return (\n            <div>\n                <h2>List of users</h2>\n                <ul>\n                    {\n                        this.state.isFetching\n                        ?\n                            <i>Fetchin' data ...</i>\n                        :\n                            this.state.users.map((item, index) =>\n                                <li key={index}>{item}</li>\n                            )\n                        }\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default UsersList;","import * as React from 'react';\n\nconst userAddEndpoint = \"/reqres/users\";\n\nconst userAdd = async (user) => {\n\n  return await fetch(userAddEndpoint, {\n      method: \"POST\",\n      headers:  {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    })\n};\n\nclass UserAdd extends React.Component {\n    \n    constructor() {\n        super();\n        this.state = {\n            userAdded: false,\n            newUserID: null\n        };\n    }\n\n    addUser = (e) => {\n        e.preventDefault();\n        \n        const name = document.getElementById(\"name\").value\n        const job = document.getElementById(\"job\").value\n\n        // Call the API\n        userAdd({\n            \"name\": name,\n            \"job\": job\n        }).then(response => {\n            if (response.ok) {\n                response.json().then(json => {\n                    this.setState(\n                        {\n                            userAdded: true,\n                            newUserID: json.id\n                        }\n                    )\n                })\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>Add a user</h2>\n                <form onSubmit={this.addUser}>\n                    <div class=\"form-field\">\n                        <label for=\"name\">New user's name:</label>\n                        <input type=\"text\" id=\"name\" />\n                    </div>\n\n                    <div class=\"form-field\">\n                        <label for=\"job\">New user's job:</label>\n                        <input type=\"Text\" id=\"job\" />\n                    </div>\n\n                    <button type=\"submit\">Add user</button>\n                </form>\n                {\n                    this.state.userAdded\n                    ?\n                    <span class=\"green\">User added successfuly. New ID: {this.state.newUserID}</span>\n                    :\n                    <span></span>\n                }\n            </div>\n        );\n    }\n}\n\nexport default UserAdd;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport UsersList from \"./usersList\"\nimport UserAdd from \"./userAdd\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <h1>Demo site for <i>flask-reactize</i></h1>\n    <UsersList />\n    <UserAdd />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}